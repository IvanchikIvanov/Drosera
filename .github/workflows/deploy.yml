name: Deploy Drosera Nodes

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      target_servers:
        description: 'Deploy to servers'
        required: false
        default: 'both'
        type: choice
        options:
        - server1
        - server2  
        - both

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server: [1, 2]
      fail-fast: false
    steps:
      - name: Skip if not target server
        if: github.event.inputs.target_servers != 'both' && github.event.inputs.target_servers != format('server{0}', matrix.server)
        run: echo "Skipping server ${{ matrix.server }}" && exit 0

      - name: Deploy to Server ${{ matrix.server }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets[format('SERVER{0}_HOST', matrix.server)] }}
          username: ${{ secrets[format('SERVER{0}_USER', matrix.server)] }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 30m
          script: |
            set -e
            echo "üöÄ Starting deployment on Server ${{ matrix.server }}"
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            cd /root && docker-compose down 2>/dev/null || true
            
            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ–∂–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            rm -rf /root/DROSERA
            git clone https://github.com/${{ github.repository }}.git /root/DROSERA
            cd /root/DROSERA
            
            # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è Docker Compose
            cat > .env << EOF
            ETH_PRIVATE_KEY=${{ secrets[format('DROSERA_PRIVATE_KEY_SERVER{0}', matrix.server)] }}
            VPS_IP=${{ secrets[format('SERVER{0}_HOST', matrix.server)] }}
            HOLESKY_RPC_URL=${{ secrets.HOLESKY_RPC_URL }}
            BACKUP_RPC_URL=${{ secrets.BACKUP_RPC_URL }}
            EOF
            
            # –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
            if ! command -v docker &> /dev/null || ! command -v drosera &> /dev/null; then
                echo "üì¶ Installing dependencies..."
                chmod +x install.sh
                ./install.sh
                source /root/.bashrc
            fi
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git –¥–ª—è Trap –¥–µ–ø–ª–æ—è
            git config --global user.email "${{ secrets.GITHUB_EMAIL }}"
            git config --global user.name "${{ secrets.GITHUB_USERNAME }}"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Trap –ø—Ä–æ–µ–∫—Ç–∞
            mkdir -p /root/my-drosera-trap
            cd /root/my-drosera-trap
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trap –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ ! -f "foundry.toml" ]; then
                echo "üîß Initializing Trap..."
                /root/.foundry/bin/forge init -t drosera-network/trap-foundry-template --force
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                curl -fsSL https://bun.sh/install | bash
                source /root/.bashrc
                bun install
                /root/.foundry/bin/forge build
            fi
            
            # –î–µ–ø–ª–æ–π Trap —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º
            echo "üöÄ Deploying Trap..."
            export DROSERA_PRIVATE_KEY="${{ secrets[format('DROSERA_PRIVATE_KEY_SERVER{0}', matrix.server)] }}"
            source /root/.bashrc
            drosera apply
            
            # –ó–∞–ø—É—Å–∫ Docker Compose
            cd /root/DROSERA
            echo "üê≥ Starting Docker containers..."
            docker-compose up -d
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            sleep 10
            docker-compose ps
            docker-compose logs --tail=50
            
            echo "‚úÖ Deployment completed on Server ${{ matrix.server }}"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Discord
        if: secrets.DISCORD_WEBHOOK != ''
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Drosera Deployment"
          description: "Deployment ${{ job.status }} for commit ${{ github.sha }}" 