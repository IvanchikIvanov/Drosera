name: Deploy Drosera Nodes

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      target_servers:
        description: 'Deploy to servers'
        required: false
        default: 'both'
        type: choice
        options:
        - server1
        - server2  
        - both

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server: [1, 2]
      fail-fast: false
    steps:
      - name: Deploy to Server ${{ matrix.server }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars[format('SERVER{0}_HOST', matrix.server)] }}
          username: ${{ vars[format('SERVER{0}_USER', matrix.server)] }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 60m
          script: |
            set -e
            echo "üöÄ Starting deployment on Server ${{ matrix.server }}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
            if ! command -v docker &> /dev/null || ! command -v drosera &> /dev/null; then
                export DEBIAN_FRONTEND=noninteractive
                
                echo "üì¶ Install Dependencies"
                sudo apt-get update && sudo apt-get upgrade -y
                sudo apt install curl ufw iptables build-essential git wget lz4 jq make gcc nano automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip libleveldb-dev -y
                
                echo "üê≥ Install Docker"
                sudo apt update -y && sudo apt upgrade -y
                for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg -y || true; done
                
                sudo apt-get update
                sudo apt-get install ca-certificates curl gnupg -y
                sudo install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                sudo chmod a+r /etc/apt/keyrings/docker.gpg
                
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                
                sudo apt update -y && sudo apt upgrade -y
                sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
                
                # Test Docker
                sudo docker run hello-world
                
                echo "üîß Configure Environments"
                # Drosera CLI
                curl -L https://app.drosera.io/install | bash
                source /root/.bashrc && droseraup
                
                # Foundry CLI
                curl -L https://foundry.paradigm.xyz | bash
                source /root/.bashrc && foundryup
                
                # Bun
                curl -fsSL https://bun.sh/install | bash && source /root/.bashrc
            fi
            
            echo "üìã Deploy Contract & Trap"
            mkdir -p /root/my-drosera-trap
            cd /root/my-drosera-trap
            
            # Git config
            git config --global user.email "Github_Email"
            git config --global user.name "Github_Username"
            
            # Initialize Trap (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if [ ! -f "foundry.toml" ]; then
                echo "üîß Initialize Trap"
                /root/.foundry/bin/forge init -t drosera-network/trap-foundry-template --force
                
                echo "üî® Compile Trap"
                curl -fsSL https://bun.sh/install | bash && source /root/.bashrc
                bun install
                /root/.foundry/bin/forge build
            fi
            
            echo "üöÄ Deploy Trap"
            export DROSERA_PRIVATE_KEY="${{ secrets[format('DROSERA_PRIVATE_KEY_SERVER{0}', matrix.server)] }}"
            source /root/.bashrc && drosera apply
            
            echo "‚úÖ Deployment completed on Server ${{ matrix.server }}"

 