# Создаем скрипт мониторинга
cat > /opt/sync_monitor.sh << 'EOF'
#!/bin/bash

# Цвета для вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

clear
echo -e "${BLUE}=== Мониторинг синхронизации Holesky ноды ===${NC}"
echo ""

while true; do
    # Получаем время
    TIMESTAMP=$(date '+%H:%M:%S')
    
    # Проверяем статус контейнеров
    NETHERMIND_STATUS=$(docker inspect -f '{{.State.Status}}' nethermind-holesky 2>/dev/null || echo "not found")
    LIGHTHOUSE_STATUS=$(docker inspect -f '{{.State.Status}}' lighthouse-holesky 2>/dev/null || echo "not found")
    
    # Получаем данные о синхронизации через RPC
    SYNC_DATA=$(curl -s -X POST -H "Content-Type: application/json" \
        --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' \
        http://localhost:8545 2>/dev/null)
    
    BLOCK_NUMBER=$(curl -s -X POST -H "Content-Type: application/json" \
        --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
        http://localhost:8545 2>/dev/null)
    
    # Получаем последние логи Nethermind для прогресса Snap Sync
    SNAP_PROGRESS=$(docker logs nethermind-holesky --tail 10 2>/dev/null | grep "Snap.*State Ranges" | tail -1 | grep -o "([0-9.]*%)" | tr -d '()')
    
    # Получаем информацию о пирах
    PEER_COUNT=$(curl -s -X POST -H "Content-Type: application/json" \
        --data '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":1}' \
        http://localhost:8545 2>/dev/null | grep -o '"result":"0x[0-9a-f]*"' | cut -d'"' -f4)
    
    # Конвертируем hex в decimal
    if [[ $PEER_COUNT =~ ^0x[0-9a-f]+$ ]]; then
        PEER_COUNT_DEC=$((16#${PEER_COUNT#0x}))
    else
        PEER_COUNT_DEC="N/A"
    fi
    
    # Очищаем экран и выводим информацию
    printf "\033[H\033[2J"
    echo -e "${BLUE}=== Мониторинг синхронизации Holesky ноды === ${TIMESTAMP} ===${NC}"
    echo ""
    
    # Статус контейнеров
    echo -e "${YELLOW}Статус контейнеров:${NC}"
    if [ "$NETHERMIND_STATUS" = "running" ]; then
        echo -e "  Nethermind: ${GREEN}✓ Работает${NC}"
    else
        echo -e "  Nethermind: ${RED}✗ Не работает${NC}"
    fi
    
    if [ "$LIGHTHOUSE_STATUS" = "running" ]; then
        echo -e "  Lighthouse: ${GREEN}✓ Работает${NC}"
    else
        echo -e "  Lighthouse: ${RED}✗ Не работает${NC}"
    fi
    echo ""
    
    # Информация о синхронизации
    echo -e "${YELLOW}Синхронизация:${NC}"
    
    if echo "$SYNC_DATA" | grep -q '"result":false'; then
        echo -e "  Статус: ${GREEN}✓ СИНХРОНИЗИРОВАНА${NC}"
        CURRENT_BLOCK=$(echo "$BLOCK_NUMBER" | grep -o '"result":"0x[0-9a-f]*"' | cut -d'"' -f4)
        if [[ $CURRENT_BLOCK =~ ^0x[0-9a-f]+$ ]]; then
            CURRENT_BLOCK_DEC=$((16#${CURRENT_BLOCK#0x}))
            echo -e "  Текущий блок: ${GREEN}$CURRENT_BLOCK_DEC${NC}"
        fi
    elif echo "$SYNC_DATA" | grep -q '"startingBlock"'; then
        STARTING=$(echo "$SYNC_DATA" | grep -o '"startingBlock":"0x[0-9a-f]*"' | cut -d'"' -f4)
        CURRENT=$(echo "$SYNC_DATA" | grep -o '"currentBlock":"0x[0-9a-f]*"' | cut -d'"' -f4)
        HIGHEST=$(echo "$SYNC_DATA" | grep -o '"highestBlock":"0x[0-9a-f]*"' | cut -d'"' -f4)
        
        if [[ $STARTING =~ ^0x[0-9a-f]+$ ]] && [[ $CURRENT =~ ^0x[0-9a-f]+$ ]] && [[ $HIGHEST =~ ^0x[0-9a-f]+$ ]]; then
            STARTING_DEC=$((16#${STARTING#0x}))
            CURRENT_DEC=$((16#${CURRENT#0x}))
            HIGHEST_DEC=$((16#${HIGHEST#0x}))
            
            if [ $HIGHEST_DEC -gt $STARTING_DEC ]; then
                PROGRESS=$(( (CURRENT_DEC - STARTING_DEC) * 100 / (HIGHEST_DEC - STARTING_DEC) ))
                REMAINING=$(( HIGHEST_DEC - CURRENT_DEC ))
                
                echo -e "  Статус: ${YELLOW}⏳ Синхронизируется${NC}"
                echo -e "  Прогресс: ${BLUE}$PROGRESS%${NC}"
                echo -e "  Текущий блок: ${BLUE}$CURRENT_DEC${NC}"
                echo -e "  Целевой блок: ${BLUE}$HIGHEST_DEC${NC}"
                echo -e "  Осталось блоков: ${YELLOW}$REMAINING${NC}"
                
                # Прогресс бар
                BAR_LENGTH=50
                FILLED_LENGTH=$(( PROGRESS * BAR_LENGTH / 100 ))
                BAR=$(printf "%*s" $FILLED_LENGTH | tr ' ' '█')
                EMPTY=$(printf "%*s" $((BAR_LENGTH - FILLED_LENGTH)) | tr ' ' '░')
                echo -e "  [${GREEN}$BAR${NC}${RED}$EMPTY${NC}] $PROGRESS%"
            fi
        fi
    else
        echo -e "  Статус: ${RED}✗ Недоступна${NC}"
    fi
    
    # Snap Sync прогресс
    if [ ! -z "$SNAP_PROGRESS" ]; then
        echo -e "  Snap Sync: ${BLUE}$SNAP_PROGRESS${NC}"
    fi
    
    echo ""
    
    # Информация о сети
    echo -e "${YELLOW}Сеть:${NC}"
    echo -e "  Подключенные пиры: ${BLUE}$PEER_COUNT_DEC${NC}"
    
    # Последние логи
    echo ""
    echo -e "${YELLOW}Последние события:${NC}"
    docker logs nethermind-holesky --tail 3 2>/dev/null | while read line; do
        if echo "$line" | grep -q "Snap.*State Ranges"; then
            echo -e "  ${GREEN}$line${NC}"
        elif echo "$line" | grep -q "Received New Block"; then
            echo -e "  ${BLUE}$line${NC}"
        elif echo "$line" | grep -q "Syncing"; then
            echo -e "  ${YELLOW}$line${NC}"
        else
            echo -e "  $line"
        fi
    done
    
    echo ""
    echo -e "${BLUE}Обновление каждые 10 секунд... (Ctrl+C для выхода)${NC}"
    
    sleep 10
done
EOF

# Делаем скрипт исполняемым
chmod +x /opt/sync_monitor.sh

# Запускаем скрипт
/opt/sync_monitor.sh